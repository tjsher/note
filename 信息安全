## 一、ARP安全
	思考一下，为什么主机A需要将B的MAC保存到缓存表中？
	背一下ARP报文格式。
### ARP的有效期和无状态
	无状态是指，主机只要收到ARP应答报文，无论目的地址是不是自己都会更新自己的ARP缓存。但只更新ARP缓存中已有的条目，未有条目的报文将被忽略。
### Gratuitous ARP
	源IP地址和目的IP地址都是自己。
	源MAC地址是自己，目的MAC地址是广播地址（全1）。
	告知其他主机，源IP和源MAC绑定（不期望收到回应报文），可以让其他主机更新ARP缓存。
	如果收到回应报文，发送IP冲突。
### ARP攻击
	发送（广播或者单播）误导性的ARP报文（可以是Gratuitous ARP和ARP响应报文）。
### 防御
	动态ARP检测，IP-PORT-MAC作为DAI的表项。对于交换机来说，真实ARP响应和虚假ARP响应来自不同的PORT。
	IP1-PORT1-MAC1和IP2-PORT2—MAC2是两个不同的表项，如果从PORT1收到来自IP2的报文则有问题。
	用户采用ARP防火墙。
	
## 二、IP安全
	背一下IP报文格式。

### 基于IP分片的DOS攻击
	攻击者构造两个分片，第一个分片的偏移为0；第二个分片的偏移是64800。因为IP分片可以乱序到达，所以被攻击者认为中间的报文还没到达，会开辟大概64k的内存并等待一段时间。
### 防御
	不提前开辟空间。
	出现大量未到达的分片就降低等待时间。
### TearDrop攻击
	比如说IP分片报文的首片长度是 1000，则第2片的offset字段就必须是1000，如果出现小于1000的情况，相当于第二片IP分片报文和第一片IP分片在重组的时候会出现重叠部分，此时防火墙等安全设备就会上报Teardrop攻击。
	如果第2片的off+len溢出就会由正数变为负数（补码的特点），等于操作系统会为了第2片往前覆盖内存空间。
### 防御
	检查offset和len。
### 微小碎片攻击
	IP数据报最小分片长度是68字节。使用IP首部的选项字段将IP首部填满到60字节。这样第一个分片只有8个字节留给TCP首部（需要20字节），导致SYN位只能放在第二个分片，跳过检测（一般只检测第一个IP数据报）。
### 防御
	如果第二分片offset ==1 且是tcp协议，则丢弃第二分片。
	网络层（IP）不会进行差错控制，少了任何一个分片都无法重组，会导致整个报文被丢弃。
### 重叠碎片攻击
	第一个分片（offset=0）是能通过过滤器的正常分片，第二个分片的offset!=0，所以跳过检测，但被精心设计过，能够覆盖第一个分片的部分内容，从而实现攻击。
### 防御
	路由器的过滤模块对具有非零偏移的片段强制执行最小片段偏移。
	如果第二分片offset ==1 且是tcp协议，则丢弃第二分片。
	
## 三、ICMP安全
### SMURF攻击
	攻击者构造源IP地址是受害者，目的IP地址是广播地址的ICMP报文，让网络中的其他主机响应这个ICMP报文，以达到让受害者主机处理大量响应而瘫痪的目的。
### 防御
	路由器拒绝转发、主机拒绝响应ICMP报文或ICMP广播。
### PING of DEATH
	IP报文长度限制（首部+数据）为65535字节，但由于以太网限制，在传输时必须分片。首部中的offset字段限制偏移量最多为13位*8字节=65528字节，如果最后一个分片携带的数据超过65536-65528=8字节则会溢出。
	offset是相对于IP报文开始的偏移，包括IP首部。
### 防御
	检查offset，超过限制的丢弃。
### ICMP重定向攻击
	攻击者伪造ICMP重定向报文给受害者，受害者会根据重定向报文更改自己的路由表。
### 防御
	过滤ICMP报文或者不允许重定向
## 四、socket
### socket()
```c
int socket(int domain, int type, int protocol);
/*
domain: 
AF_INET, PF_PACKET
type:
SOCK_STREAM, SOCK_DGRAM, SOCK_RAW
protocol:
和type有关
*/
```

### htonl()
	主机的字节序 -> 网络序
	host to network unsigned long

### raw_socket为什么需要两个？
	一个工作在数据链路层开启混杂模式监听所有报文。
	一个工作在网络层构造IP报文并发送。

## 五、TCP/UDP协议安全
### 端口

	端口是一种抽象的软件结构，包括一些数据结构和I/O缓冲。
### TCP SYN Flooding

	攻击者不停发送SYN=1的tcp报文，消耗受害者主机的资源（收到SYN报文后会为该报文开辟内存空间，进入半连接状态；能进入半连接的请求个数有限）。如果开辟的内存空间*半连接数 > 内存上限，主机就无法处理正常的请求。
	
### 防御
#### SYN Cache
	服务器每次收到SYN报文都生成一个SYN Cache项，该项的所占内存远小于正常TCP连接所需的。
	服务器每次收到ACK报文时去匹配SYN Cache表，若匹配则建立连接，删除该项。

#### SYN Cookie
	服务器一收到SYN报文，就马上发送SYN+ACK给客户端，该报文中的序号是精心设计的。
	服务器只要没收到ACK报文，就完全不给SYN报文分配内存。
	服务器如果收到ACK报文，会将ACK报文中的序号-1得到自己发送出的序号，并判断该序号是否有效。
	缺点：因为服务器会丢弃所有的SYN报文，所以一些SYN报文中的协商数据无法保存。
		 如果客户端发送的ACK报文丢失了，但客户端认为连接已经建立了。然后客户端上有些协议（SSH）要求服务器在连接建立后先发送报文，所以不会重发ACK报文，导致了死锁，只能等待此次连接失效，浪费客户端很多时间。

### 端口扫描的原理是什么？
	按顺序（被分配的固定端口+随机未被分配的端口）对端口尝试连接，如果响应是（SYN+ACK之类）则该端口是open的，响应是RTS则端口是close的。完全无响应的大概率是被防火墙过滤了。

### nmap -sS和nmap -sT的区别是什么？
	所需权限不同，sS > sT。
	sS不建立连接。
	sS不留痕迹。
	sS违反TCP连接3次握手的要求。

### nmap -sA扫描的原理是什么?
	作用：判断某端口是否开启了过滤。
	发送ACK报文给目的端口。因为目的端口收到无缘无故的ACK报文后会发送RTS报文。若扫描者未收到RTS报文则说明该端口开启了过滤。
	还有-sF，设置的fin标志位。

### nmap -f
	将一个ACK或SYN报文分成几个分片发送，有可能可以绕过过滤。
	
### nmap idle扫描的原理是什么？
	每台主机发出IP数据报时，会设置IP首部中的ID字段以区别不同的数据报。通常采用默认的+1方式。
	探测Zombie的IP ID并记录下来。
	伪造Zombie主机发数据包给目标主机。根据端口的状态，目标主机可能会也有可能不会导致Zombie主机IP ID值增加。
	再探测Zombie主机的IP ID。比较两次得到IP ID值。
	如果增加为2则说明目的端口开放，为1则说明关闭。
	仍然无法区别关闭和过滤。
	身处内网的zombie主机可以被攻击者当作跳板扫描内部信息。


## 六、防火墙
### 包过滤防火墙
	设置静态的ACL（源地址、目标地址、协议、源端口、目标端口）对收到的报文进行匹配。
	缺点：无法处理IP碎片攻击，无法处理来自应用层的攻击，不支持某些复杂的协议。

### 状态检测防火墙
	状态检测防火墙在接收到连接建立请求时，就可以建立一张表，在表中存储相关的各个连接的信息，建立连接状态规则，基于这个表对进入和出去的数据包进行匹配。
	
### IPtables
	包过滤机制是netfilter，管理工具iptables。用户空间的iptables制定防火墙规则，内核空间的netfilter则真正实现防火墙功能。
	4表5链。不是所有表都有5条链。filter表只有input、output、forward。
	在iptables中有四种状态：NEW，ESTABLISHED，RELATED，INVALID。
### IPtables参数
+ -F, --flush [chain]：清空指定的规则链上的规则；
+ -P, --policy chain target 制定链表的默认策略(ACCEPT|DROP|REJECT)
+ -L, --list [chain]：列出规则；
+ -A, 尾插法
+ -I, 头插法
+ -p,协议  例：iptables -A INPUT -p tcp
+ -s,源地址 例：iptables -A INPUT -s 192.168.1.1
+ -d,目的地址 例：iptables -A INPUT -d 192.168.12.1
+ -sport,源端口 例:iptables -A INPUT -p tcp --sport 22
+ -dport,目的端口 例:iptables -A INPUT -p tcp --dport 22
+ -i,指定入口网卡 例:iptables -A INPUT -i eth0
+ -o,指定出口网卡 例:iptables -A FORWARD -o eth0
+ -j,(ACCEPT|DROP|REJECT)
+

### netfilter
+ NF_IP_PRE_ROUTING：刚刚进入网络层的数据包通过此点（刚刚进行完版本号，校验和等检测）， 目的地址	转换在此点进行；
+ NF_IP_LOCAL_IN：经路由查找后，送往本机的通过此检查点，INPUT包过滤在此点进行；
+ NF_IP_FORWARD：要转发的包通过此检测点，FORWORD包过滤在此点进行；
+ NF_IP_POST_ROUTING：所有马上便要通过网络设备出去的包通过此检测点，内置的源地址转换功能（包括地址伪装）在此点进行；
+ NF_IP_LOCAL_OUT：本机进程发出的包通过此检测点，OUTPUT包过滤在此点进行。

### sk_buff的4个指针
	head, data, tail, end
	
## 七、Rootkit
	是一种黑客安全工具，用于窃取目标主机上的密码和信息流。是一系列能够让黑客注入后门程序到指定系统的工具，并且能收集其它系统的信息和掩盖系统被植入后门的踪迹是一种典型的木马软件。
### 后门
	后门程序一般指绕过安全性控制而获取对程序或系统访问权的方法。
	
### 篡改系统调用
```
sys_call_table = 0xffffffff81a00200;
original_open = (void *)sys_call_table[__NR_open];
disable_write_protection();
sys_call_table[__NR_open] = (unsigned long *)&my_open;
enable_write_protection();
```
### sys_cal_table的获取
`unsigned long addr = kallsyms_lookup_name(sym_name);`

### esp、eip
	esp是栈顶指针，eip是当前正在执行指令的指针。

### call operation
	call会先让esp减少4个字节（32位系统，栈顶向下，也就是栈大小增加4个字节），然后把执行后指令后的返回地址入栈，然后将eip指向应该执行的operation。

### ret
	不需要操作数，将当前esp指向的值value读出，然后增加esp4个字节，将eip指向value（value是个地址）。
	
	
	
	
	
	
